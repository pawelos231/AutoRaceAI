{"mappings":"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QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;QACA;YACI,GAAG,KAAK,cAAc;YACtB,GAAG;QACP;KACH","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-b846ab0950fdad34.js","dist/index.js","dist/modules/CarsCanvas.js","dist/constants/DefaultValues/EntitiesDimmensions.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","dist/modules/entities/Car.js","dist/types/CarTypes.js","dist/helpers/InputController.js","dist/constants/controllEnums.js","dist/modules/Sensor.js","dist/math/lerp.js","dist/constants/DefaultValues/colors.js","dist/math/intersections.js","dist/utility/polyIntersect.js","dist/network/index.js","dist/network/level.js","dist/modules/Common.js","dist/constants/classNames.js","dist/types/CommonTypes.js","dist/modules/entities/Road.js","dist/helpers/getRandomValue.js","dist/network/geneticAlgorithm.js","dist/constants/DefaultValues/neuralNetworkConsts.js","dist/data/traffic.js"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"8fdf439d1f978438\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets /*: {|[string]: boolean|} */, assetsToDispose /*: Array<[ParcelRequire, string]> */, assetsToAccept /*: Array<[ParcelRequire, string]> */;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\nfunction getPort() {\n  return HMR_PORT || location.port;\n}\n\n// eslint-disable-next-line no-redeclare\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');\n\n  // Web extension context\n  var extCtx = typeof chrome === 'undefined' ? typeof browser === 'undefined' ? null : browser : chrome;\n\n  // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n  var supportsSourceURL = false;\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  }\n\n  // $FlowFixMe\n  ws.onmessage = async function (event /*: {data: string, ...} */) {\n    checkedAssets = {} /*: {|[string]: boolean|} */;\n    assetsToAccept = [];\n    assetsToDispose = [];\n    var data /*: HMRMessage */ = JSON.parse(event.data);\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);\n\n      // Handle HMR Update\n      let handled = assets.every(asset => {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n      if (handled) {\n        console.clear();\n\n        // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n        if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n        }\n        await hmrApplyUpdates(assets);\n\n        // Dispose all old assets.\n        let processedAssets = {} /*: {|[string]: boolean|} */;\n        for (let i = 0; i < assetsToDispose.length; i++) {\n          let id = assetsToDispose[i][1];\n          if (!processedAssets[id]) {\n            hmrDispose(assetsToDispose[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n\n        // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n        processedAssets = {};\n        for (let i = 0; i < assetsToAccept.length; i++) {\n          let id = assetsToAccept[i][1];\n          if (!processedAssets[id]) {\n            hmrAccept(assetsToAccept[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n      } else fullReload();\n    }\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      for (let ansiDiagnostic of data.diagnostics.ansi) {\n        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n      }\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html);\n        // $FlowFixMe\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\nfunction fullReload() {\n  if ('reload' in location) {\n    location.reload();\n  } else if (extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  }\n}\nfunction getParents(bundle, id) /*: Array<[ParcelRequire, string]> */{\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n  var parents = [];\n  var k, d, dep;\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n  return parents;\n}\nfunction updateLink(link) {\n  var href = link.getAttribute('href');\n  if (!href) {\n    return;\n  }\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n  newLink.setAttribute('href',\n  // $FlowFixMe\n  href.split('?')[0] + '?' + Date.now());\n  // $FlowFixMe\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href /*: string */ = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n    cssTimeout = null;\n  }, 50);\n}\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n      return new Promise((resolve, reject) => {\n        var _document$head;\n        script.onload = () => resolve(script);\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 ? void 0 : _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension bugfix for Chromium\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {\n            if (typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n              extCtx.runtime.reload();\n              return;\n            }\n            asset.url = extCtx.runtime.getURL('/__parcel_hmr_proxy__?url=' + encodeURIComponent(asset.url + '?t=' + Date.now()));\n            return hmrDownload(asset);\n          }\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n          (_document$head2 = document.head) === null || _document$head2 === void 0 ? void 0 : _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\nfunction hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      }\n\n      // $FlowFixMe\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    }\n\n    // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n    delete modules[id];\n    delete bundle.cache[id];\n\n    // Now delete the orphans.\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\nfunction hmrAcceptCheck(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  }\n\n  // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n      parents.push(...p);\n    }\n  }\n  return accepted;\n}\nfunction hmrAcceptCheckOne(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n  if (checkedAssets[id]) {\n    return true;\n  }\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToDispose.push([bundle, id]);\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n}\nfunction hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n  delete bundle.cache[id];\n}\nfunction hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {\n  // Execute the module.\n  bundle(id);\n\n  // Run the accept callbacks in the new version of the module.\n  var cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        assetsToAlsoAccept.forEach(function (a) {\n          hmrDispose(a[0], a[1]);\n        });\n\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n}","import { CarCanvas } from \"./modules/CarsCanvas\";\nconst canvas = new CarCanvas();\ncanvas.animate();\n/*\nsetInterval(() => {\n  canvas.animate();\n}, 6);\n*/\n","import { CAR_HEIGHT, CAR_WIDTH, CAR_Y_POS, CANVAS_HEIGHT, CANVAS_WIDTH, } from \"../constants/DefaultValues/EntitiesDimmensions\";\nimport { Car } from \"./entities/Car\";\nimport { VehicleType, VehicleSpeed } from \"../types/CarTypes\";\nimport { Road } from \"./entities/Road\";\nimport { BLACK, BLUE } from \"../constants/DefaultValues/colors\";\nimport { Common } from \"./Common\";\nimport { CAR_CANVAS_ID } from \"../constants/classNames\";\nimport { NeuralNetwork } from \"../network/index\";\nimport { BEST_CAR_LOCAL } from \"../constants/classNames\";\nimport { getRandomValueBetweenNums } from \"../helpers/getRandomValue\";\nimport { GeneticAlgorithm } from \"../network/geneticAlgorithm\";\nimport { DEFAULT_MUTATION_AMOUNT } from \"../constants/DefaultValues/neuralNetworkConsts\";\nimport { END_OF_MAP_TOP } from \"../constants/DefaultValues/EntitiesDimmensions\";\nimport { TRAFFIC_MOCK_DATA } from \"../data/traffic\";\nimport { Logger } from \"../types/CommonTypes\";\nconst POPULATION_LOCAL_STORAGE_KEY = \"population\";\nconst ROAD_WIDTH_MULTIPLIER = 0.9;\nconst CARS_TO_TRAIN_COUNT = 250;\nexport class CarCanvas extends Common {\n    constructor() {\n        var _a, _b;\n        super();\n        this.ctx = null;\n        this.bestCar = null;\n        this.cleanUpOfCars();\n        this.population = [];\n        this.canvas = this.bindElementById(CAR_CANVAS_ID);\n        this.initCanvas();\n        this.save();\n        this.traffic = [];\n        this.road = new Road(((_a = this.canvas) === null || _a === void 0 ? void 0 : _a.width) / 2, ((_b = this.canvas) === null || _b === void 0 ? void 0 : _b.width) * ROAD_WIDTH_MULTIPLIER);\n        this.generation = 0;\n        const pop = localStorage.getItem(POPULATION_LOCAL_STORAGE_KEY);\n        if (pop) {\n            const item = JSON.parse(pop);\n            if (CARS_TO_TRAIN_COUNT > item.population.length) {\n                let count = 0;\n                for (let i = 0; i < CARS_TO_TRAIN_COUNT; i++) {\n                    count++;\n                    if (count >= item.population.length - 1) {\n                        count = 0;\n                    }\n                    console.log(count);\n                    this.population[i] = JSON.parse(JSON.stringify(item.population[count]));\n                }\n            }\n            else if (CARS_TO_TRAIN_COUNT < item.population.length) {\n                const ws = item.population.length / CARS_TO_TRAIN_COUNT;\n                const selected = item.population.slice(0, Math.floor(item.population.length / ws));\n                this.population = selected;\n            }\n            else {\n                this.population = item.population;\n            }\n            this.generation = item.generation;\n        }\n        this.cars = this.generateCars(CARS_TO_TRAIN_COUNT);\n        this.traffic = this.generateMockTrafficNonRandom();\n    }\n    initCanvas() {\n        this.canvas.width = CANVAS_WIDTH;\n        this.canvas.height = CANVAS_HEIGHT;\n        this.ctx = this.canvas.getContext(\"2d\");\n    }\n    shouldCarsTrain() {\n        var _a;\n        this.bestCar = this.cars.find((car) => {\n            return car.y == Math.min(...this.cars.map((c) => c.y));\n        });\n        if (this.bestCar.y < END_OF_MAP_TOP) {\n            GeneticAlgorithm.trainNeuralNetworks(this.cars, this.population, this.traffic.map((car) => car.y));\n            this.population = GeneticAlgorithm.evolvePopulation(this.population, (_a = this.cars[0].sensor) === null || _a === void 0 ? void 0 : _a.rayCount, this.generation, this.population[0].fitness);\n            this.population.sort((a, b) => b.fitness - a.fitness);\n            const bestFit = this.population[0].fitness;\n            const averageFit = this.population.reduce((a, b) => a + b.fitness, 0) /\n                this.population.length;\n            console.log(\"BEST FIT:\", bestFit, \"\\n AVG FIT:\", averageFit);\n            const localBrain = JSON.parse(localStorage.getItem(BEST_CAR_LOCAL));\n            if (localBrain && bestFit > localBrain.fitness) {\n                this.cars[0].brain = this.population[0];\n                this.bestCar.brain = this.population[0];\n                this.saveBestCarToStorage();\n            }\n            if (!localBrain) {\n                localStorage.setItem(BEST_CAR_LOCAL, JSON.stringify(this.population[0]));\n            }\n            this.generation++;\n            this.cars = this.generateCars(CARS_TO_TRAIN_COUNT);\n            this.traffic = this.generateMockTrafficNonRandom();\n        }\n    }\n    animate() {\n        var _a, _b, _c, _d;\n        this.shouldCarsTrain();\n        for (let i = 0; i < this.traffic.length; i++) {\n            this.traffic[i].update(this.road.borders, []);\n        }\n        for (let i = 0; i < this.cars.length; i++) {\n            if (!this.cars[i].damaged) {\n                this.cars[i].update(this.road.borders, this.traffic);\n            }\n            if (this.cars[i].damaged && this.cars[i].snapshotOfTraffic.length == 0) {\n                this.cars[i].snapshotOfTraffic = this.traffic.map((car) => car.y);\n            }\n        }\n        this.ctx.clearRect(0, 0, window.innerWidth, window.innerHeight);\n        (_a = this.ctx) === null || _a === void 0 ? void 0 : _a.save();\n        (_b = this.ctx) === null || _b === void 0 ? void 0 : _b.translate(0, -this.bestCar.y + ((_c = this.canvas) === null || _c === void 0 ? void 0 : _c.height) * 0.7);\n        this.road.draw(this.ctx);\n        for (const car of this.traffic) {\n            car.draw(this.ctx, BLUE);\n        }\n        this.ctx.globalAlpha = 0.2;\n        for (const car of this.cars) {\n            if (!car.damaged) {\n                car.draw(this.ctx, BLACK);\n            }\n        }\n        this.ctx.globalAlpha = 1;\n        this.bestCar.draw(this.ctx, BLACK, true);\n        (_d = this.ctx) === null || _d === void 0 ? void 0 : _d.restore();\n        this.DrawGeneerationNumber();\n        requestAnimationFrame(this.animate.bind(this));\n    }\n    generateCars(N) {\n        const cars = [];\n        this.cars = [];\n        let population = [];\n        if (this.population.length == 0) {\n            console.log(\"CREATING NEW POPULATION\");\n        }\n        else {\n            console.log(\"USING OLD POPULATION\");\n        }\n        for (let i = 1; i <= N; i++) {\n            let car = new Car(this.road.getLaneCenter(1), CAR_Y_POS, CAR_WIDTH, CAR_HEIGHT, VehicleType.AI, VehicleSpeed.FAST, this.road.getLaneCenter.bind(this.road), this.road.laneCount);\n            if (this.population.length == 0) {\n                population.push(JSON.parse(JSON.stringify(car.brain)));\n                if (localStorage.getItem(BEST_CAR_LOCAL)) {\n                    car.brain = JSON.parse(localStorage.getItem(BEST_CAR_LOCAL));\n                    if (i > 15) {\n                        NeuralNetwork.mutate(car.brain, DEFAULT_MUTATION_AMOUNT);\n                    }\n                }\n            }\n            else {\n                console.log(\"es\");\n                if (localStorage.getItem(BEST_CAR_LOCAL)) {\n                    if (i < 15) {\n                        car.brain = JSON.parse(localStorage.getItem(BEST_CAR_LOCAL));\n                    }\n                    else {\n                        car.brain = JSON.parse(JSON.stringify(this.population[i - 15]));\n                    }\n                }\n            }\n            cars.push(car);\n        }\n        if (this.population.length == 0) {\n            this.population = population;\n        }\n        else {\n            for (let i = 15; i < 30; i++) {\n                this.population[i] = JSON.parse(localStorage.getItem(BEST_CAR_LOCAL));\n            }\n        }\n        return cars;\n    }\n    saveBestCarToStorage() {\n        localStorage.setItem(BEST_CAR_LOCAL, JSON.stringify(this.bestCar.brain));\n    }\n    savePopulation() {\n        const popToSave = {\n            population: this.population,\n            generation: this.generation,\n        };\n        localStorage.setItem(POPULATION_LOCAL_STORAGE_KEY, JSON.stringify(popToSave));\n    }\n    deleteSavedPop() {\n        localStorage.removeItem(POPULATION_LOCAL_STORAGE_KEY);\n    }\n    save() {\n        let save = this.bindElementByClass(\"save\");\n        let savePop = this.bindElementByClass(\"population\");\n        let discardPop = this.bindElementByClass(\"dicardPopulation\");\n        save.addEventListener(\"click\", () => {\n            this.saveBestCarToStorage();\n            this.displayMessageAtTheTopOfTheScreen(\"SAVED CAR\", Logger.Message);\n        });\n        savePop.addEventListener(\"click\", () => {\n            this.displayMessageAtTheTopOfTheScreen(\"SAVED POPULATION\", Logger.Message);\n            this.savePopulation();\n        });\n        discardPop.addEventListener(\"click\", () => {\n            this.deleteSavedPop();\n            this.displayMessageAtTheTopOfTheScreen(\"DISCARDED POPULATION\", Logger.Message);\n        });\n    }\n    generateMockTrafficNonRandom() {\n        const traffic = [];\n        const MOCKED = TRAFFIC_MOCK_DATA(this.road);\n        for (let i = 0; i < MOCKED.length; i++) {\n            traffic.push(new Car(MOCKED[i].x, MOCKED[i].y, 30, 60, VehicleType.NPC, VehicleSpeed.SLOW, this.road.getLaneCenter.bind(this.road), this.road.laneCount));\n        }\n        return traffic;\n    }\n    generateRandomTraffic(numberOfCarsToGenerate) {\n        const traffic = [];\n        for (let i = 0; i < numberOfCarsToGenerate; i++) {\n            traffic.push(new Car(this.road.getLaneCenter(getRandomValueBetweenNums(0, 3)), -(i * 170) - 300, getRandomValueBetweenNums(30, 40), getRandomValueBetweenNums(60, 70), VehicleType.NPC, VehicleSpeed.SLOW, this.road.getLaneCenter.bind(this.road), this.road.laneCount));\n        }\n        return traffic;\n    }\n    cleanUpNpcs() {\n        for (let i = 0; i < this.traffic.length; i++) {\n            if (Math.abs(this.bestCar.y) - Math.abs(this.traffic[i].y) > 1000) {\n                this.traffic.splice(i, 1);\n            }\n        }\n    }\n    cleanUpAi() {\n        for (let i = 0; i < this.cars.length; i++) {\n            if (this.cars[i].damaged) {\n                this.cars.splice(i, 1);\n            }\n        }\n    }\n    cleanUpOfCars() {\n        setInterval(() => {\n            //this.cleanUpNpcs();\n        }, 1000);\n    }\n    DrawGeneerationNumber() {\n        this.ctx.font = \"24px Arial\";\n        this.ctx.fillStyle = \"black\";\n        this.ctx.textAlign = \"center\";\n        const x = 100;\n        const y = 30;\n        this.ctx.fillText(`Generation: ${this.generation} `, x, y);\n    }\n}\n","export const CANVAS_HEIGHT = window.innerHeight;\nexport const CANVAS_WIDTH = 500;\nexport const CAR_WIDTH = 50;\nexport const CAR_HEIGHT = 150;\nexport const CAR_X_POX = 250;\nexport const CAR_Y_POS = 250;\n//these values are for now only\nexport const infinity = 1000000;\nexport const DEFAULT_LANE_COUNT = 3;\nexport const DEFAULT_LINE_WIDTH = 5;\nexport const END_OF_MAP_TOP = -20000;\nexport const END_OF_MAP_BOTTOM = 1000;\n","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","import { VehicleType } from \"../../types/CarTypes\";\nimport { InputController } from \"../../helpers/InputController\";\nimport { Sensor } from \"../Sensor\";\nimport { polyInstersect } from \"../../utility/polyIntersect\";\nimport { RED } from \"../../constants/DefaultValues/colors\";\nimport { NeuralNetwork } from \"../../network/index\";\nimport { Common } from \"../Common\";\nimport { Logger } from \"../../types/CommonTypes\";\nimport { END_OF_MAP_TOP, } from \"../../constants/DefaultValues/EntitiesDimmensions\";\nexport class Car extends Common {\n    constructor(x, y, width, height, vehicleType, maxSpeed = 3, getLaneCenter, laneCount) {\n        super();\n        // Additional Car Properties\n        this.polygon = [];\n        this.sensor = null;\n        this.brain = null;\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.speed = 0;\n        this.obstaclesCrossed = 0;\n        this.acceleration = 0.2;\n        this.maxSpeed = maxSpeed;\n        this.friction = 0.05;\n        this.angle = 0;\n        this.damaged = false;\n        this.carType = vehicleType;\n        this.isDone = false;\n        this.destination = END_OF_MAP_TOP;\n        this.getLaneCenter = getLaneCenter;\n        this.laneCount = laneCount;\n        this.createdAt = Date.now();\n        this.snapshotOfTraffic = [];\n        this.useBrain = vehicleType == VehicleType.AI;\n        if (vehicleType != VehicleType.NPC) {\n            this.sensor = new Sensor();\n            this.brain = new NeuralNetwork([this.sensor.rayCount, 7, 4]);\n        }\n        this.controls = new InputController(vehicleType);\n    }\n    upDownControlls() {\n        if (this.controls.forward) {\n            this.speed += this.acceleration;\n        }\n        if (this.controls.reverse) {\n            this.speed -= this.acceleration;\n        }\n        if (this.speed > this.maxSpeed) {\n            this.speed = this.maxSpeed;\n        }\n        if (this.speed < -this.maxSpeed / 1.7) {\n            this.speed = -this.maxSpeed / 1.7;\n        }\n        if (this.speed > 0) {\n            this.speed -= this.friction;\n        }\n        if (this.speed < 0) {\n            this.speed += this.friction;\n        }\n        if (Math.abs(this.speed) < this.friction) {\n            this.speed = 0;\n        }\n        this.x -= Math.sin(this.angle) * this.speed;\n        this.y -= Math.cos(this.angle) * this.speed;\n    }\n    leftRightControlls() {\n        if (this.speed != 0) {\n            const flip = this.speed > 0 ? 1 : -1;\n            if (this.controls.left) {\n                this.angle += 0.03 * flip;\n            }\n            if (this.controls.right) {\n                this.angle -= 0.03 * flip;\n            }\n        }\n    }\n    assesDamage(roadBorders, traffic) {\n        for (let i = 0; i < roadBorders.length; i++) {\n            if (polyInstersect(this.polygon, roadBorders[i])) {\n                return true;\n            }\n        }\n        for (let i = 0; i < traffic.length; i++) {\n            if (polyInstersect(this.polygon, traffic[i].polygon)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    update(roadBorders, traffic) {\n        if (!this.damaged) {\n            this.upDownControlls();\n            this.leftRightControlls();\n            this.polygon = this.createPolygon();\n            this.damaged = this.assesDamage(roadBorders, traffic);\n        }\n        if (this.sensor) {\n            this.sensor.update(this.x, this.y, this.angle, roadBorders, traffic);\n            const offsets = this.sensor.readings.map((reading) => {\n                return reading == null ? 0 : 1 - reading.offset;\n            });\n            const outputs = NeuralNetwork.feedForward(offsets, this.brain);\n            if (this.useBrain) {\n                this.controls.forward = Boolean(outputs[0]);\n                this.controls.left = Boolean(outputs[1]);\n                this.controls.right = Boolean(outputs[2]);\n                this.controls.reverse = Boolean(outputs[3]);\n            }\n            if (this.y < END_OF_MAP_TOP) {\n                this.isDone = true;\n                this.displayMessageAtTheTopOfTheScreen(\"OUT OF MAP\", Logger.Warn);\n            }\n        }\n    }\n    createPolygon() {\n        const points = [];\n        const rad = Math.hypot(this.width, this.height) / 2;\n        const alpha = Math.atan2(this.width, this.height);\n        points.push({\n            x: this.x - Math.sin(this.angle - alpha) * rad,\n            y: this.y - Math.cos(this.angle - alpha) * rad,\n        });\n        points.push({\n            x: this.x - Math.sin(this.angle + alpha) * rad,\n            y: this.y - Math.cos(this.angle + alpha) * rad,\n        });\n        points.push({\n            x: this.x - Math.sin(Math.PI + this.angle - alpha) * rad,\n            y: this.y - Math.cos(Math.PI + this.angle - alpha) * rad,\n        });\n        points.push({\n            x: this.x - Math.sin(Math.PI + this.angle + alpha) * rad,\n            y: this.y - Math.cos(Math.PI + this.angle + alpha) * rad,\n        });\n        return points;\n    }\n    normalizeDistance() {\n        const minValue = 1000;\n        const maxValue = -10000;\n        const clampedDistance = Math.max(this.y, maxValue);\n        const normalizedValue = 1 - (clampedDistance - maxValue) / (minValue - maxValue);\n        return normalizedValue;\n    }\n    evaluateTrafficScore(trafficPosY) {\n        const TRAFFIC_COUNT = 50; //for now\n        let sum = 0;\n        if (this.snapshotOfTraffic.length == 0) {\n            for (let i = 0; i < TRAFFIC_COUNT; i++) {\n                if (this.y < trafficPosY[i]) {\n                    sum += 1;\n                }\n            }\n            return sum / TRAFFIC_COUNT;\n        }\n        else {\n            for (let i = 0; i < TRAFFIC_COUNT; i++) {\n                if (this.y < this.snapshotOfTraffic[i]) {\n                    sum += 1;\n                }\n            }\n            return sum / TRAFFIC_COUNT;\n        }\n    }\n    calculateFitness(trafficPosY) {\n        if (this.carType !== VehicleType.AI)\n            return;\n        const FRAMES_PER_SEC = 144;\n        let expectedTime = Math.abs(END_OF_MAP_TOP) / (FRAMES_PER_SEC * this.maxSpeed);\n        if (this.damaged) {\n            expectedTime =\n                (Math.abs(END_OF_MAP_TOP) / (FRAMES_PER_SEC * this.maxSpeed)) *\n                    this.normalizeDistance();\n        }\n        const finishTime = Date.now() - this.createdAt;\n        const normalizedFinishTimeFitnessValue = expectedTime / (finishTime / 1000);\n        const maxValue = 300;\n        const minValue = 0;\n        let bestDistanceFromCenter = 0;\n        for (let i = 0; i < this.laneCount; i++) {\n            const distanceFromLaneCenter = Math.abs(this.x - this.getLaneCenter(i));\n            const normalizedValue = (maxValue - distanceFromLaneCenter) / (maxValue - minValue);\n            bestDistanceFromCenter = Math.max(bestDistanceFromCenter, normalizedValue);\n        }\n        const weightForTime = 5;\n        const weightForObstaclesCrossed = 50;\n        const maxFitness = 1;\n        const trafficScore = this.evaluateTrafficScore(trafficPosY);\n        const fitness = (normalizedFinishTimeFitnessValue * weightForTime +\n            trafficScore * weightForObstaclesCrossed +\n            this.normalizeDistance() +\n            bestDistanceFromCenter +\n            this.speed / this.maxSpeed) /\n            (maxFitness * 58);\n        return Math.max(fitness, 0);\n    }\n    draw(ctx, color, drawSensor = false) {\n        ctx.beginPath();\n        if (this.damaged) {\n            ctx.fillStyle = RED;\n        }\n        else {\n            ctx.fillStyle = color;\n        }\n        ctx.moveTo(this.polygon[0].x, this.polygon[0].y);\n        for (let i = 1; i < this.polygon.length; i++) {\n            ctx.lineTo(this.polygon[i].x, this.polygon[i].y);\n        }\n        ctx.fill();\n        if (this.sensor && drawSensor) {\n            this.sensor.draw(ctx);\n        }\n    }\n}\n","export var VehicleType;\n(function (VehicleType) {\n    VehicleType[\"AI\"] = \"AI\";\n    VehicleType[\"NPC\"] = \"NPC\";\n    VehicleType[\"PLAYER\"] = \"PLAYER\";\n})(VehicleType || (VehicleType = {}));\nexport var VehicleSprite;\n(function (VehicleSprite) {\n    VehicleSprite[\"NORMAL\"] = \"NORMAL\";\n    VehicleSprite[\"TRUCK\"] = \"TRUCK\";\n    VehicleSprite[\"MOTOR\"] = \"MOTOR\";\n})(VehicleSprite || (VehicleSprite = {}));\nexport var VehicleSpeed;\n(function (VehicleSpeed) {\n    VehicleSpeed[VehicleSpeed[\"SLOW\"] = 2] = \"SLOW\";\n    VehicleSpeed[VehicleSpeed[\"AVERAGE\"] = 3] = \"AVERAGE\";\n    VehicleSpeed[VehicleSpeed[\"FAST\"] = 4] = \"FAST\";\n    VehicleSpeed[VehicleSpeed[\"ULTRA_FAST\"] = 5] = \"ULTRA_FAST\";\n})(VehicleSpeed || (VehicleSpeed = {}));\n","import { CarControls } from \"../constants/controllEnums\";\nimport { VehicleType } from \"../types/CarTypes\";\nexport class InputController {\n    constructor(carType) {\n        this.forward = false;\n        this.left = false;\n        this.right = false;\n        this.reverse = false;\n        switch (carType) {\n            case VehicleType.NPC:\n                this.forward = true;\n                break;\n            case VehicleType.PLAYER:\n                this.addKeyBoardListeners();\n                break;\n            default:\n                this.addKeyBoardListeners();\n        }\n    }\n    addKeyBoardListeners() {\n        window.addEventListener(\"keydown\", (e) => {\n            switch (e.key) {\n                case CarControls.LEFT:\n                    this.left = true;\n                    break;\n                case CarControls.RIGHT:\n                    this.right = true;\n                    break;\n                case CarControls.BACK:\n                    this.reverse = true;\n                    break;\n                case CarControls.FORWARD:\n                    this.forward = true;\n                    break;\n            }\n            window.addEventListener(\"keyup\", (e) => {\n                switch (e.key) {\n                    case CarControls.LEFT:\n                        this.left = false;\n                        break;\n                    case CarControls.RIGHT:\n                        this.right = false;\n                        break;\n                    case CarControls.BACK:\n                        this.reverse = false;\n                        break;\n                    case CarControls.FORWARD:\n                        this.forward = false;\n                        break;\n                }\n            });\n        });\n    }\n}\n","export var CarControls;\n(function (CarControls) {\n    CarControls[\"LEFT\"] = \"ArrowLeft\";\n    CarControls[\"RIGHT\"] = \"ArrowRight\";\n    CarControls[\"FORWARD\"] = \"ArrowUp\";\n    CarControls[\"BACK\"] = \"ArrowDown\";\n})(CarControls || (CarControls = {}));\n","import { lerp } from \"../math/lerp\";\nimport { YELLOW, BLACK } from \"../constants/DefaultValues/colors\";\nimport { getIntersection } from \"../math/intersections\";\nconst DEFAULT_RAY_COUNT = 15;\nexport class Sensor {\n    constructor(rayCount = DEFAULT_RAY_COUNT) {\n        this.rayCount = rayCount;\n        this.rayLength = 280;\n        this.raySpread = Math.PI / 1.5;\n        this.rays = [];\n        this.readings = [];\n    }\n    castRays(x, y, angle) {\n        this.rays = [];\n        for (let i = 0; i < this.rayCount; i++) {\n            const rayAngle = lerp(this.raySpread / 2, -this.raySpread / 2, this.rayCount == 1 ? 0.5 : i / (this.rayCount - 1)) + angle;\n            const start = { x, y };\n            const end = {\n                x: x - Math.sin(rayAngle) * this.rayLength,\n                y: y - Math.cos(rayAngle) * this.rayLength,\n            };\n            this.rays.push([start, end]);\n        }\n    }\n    update(x, y, angle, roadBorders, traffic) {\n        this.castRays(x, y, angle);\n        this.readings = [];\n        for (let i = 0; i < this.rays.length; i++) {\n            this.readings.push(this.getReading(this.rays[i], roadBorders, traffic));\n        }\n    }\n    getReading(ray, roadBorders, traffic) {\n        let touches = [];\n        for (let i = 0; i < roadBorders.length; i++) {\n            const touch = getIntersection(ray[0], ray[1], roadBorders[i][0], roadBorders[i][1]);\n            if (touch) {\n                touches.push(touch);\n            }\n        }\n        for (let i = 0; i < traffic.length; i++) {\n            const poly = traffic[i].polygon;\n            for (let j = 0; j < poly.length; j++) {\n                const value = getIntersection(ray[0], ray[1], poly[j], poly[(j + 1) % poly.length]);\n                if (value) {\n                    touches.push(value);\n                }\n            }\n        }\n        if (touches.length === 0)\n            return null;\n        else {\n            const offsets = touches.map((e) => e.offset);\n            const minOffset = Math.min(...offsets);\n            return touches.find((e) => e.offset == minOffset);\n        }\n    }\n    draw(ctx) {\n        for (let i = 0; i < this.rayCount; i++) {\n            let end = this.rays[i][1];\n            if (this.readings[i]) {\n                end = this.readings[i];\n            }\n            ctx.beginPath();\n            ctx.lineWidth = 1.5;\n            ctx.strokeStyle = YELLOW;\n            ctx.moveTo(this.rays[i][0].x, this.rays[i][0].y);\n            ctx.lineTo(end.x, end.y);\n            ctx.stroke();\n            ctx.beginPath();\n            ctx.lineWidth = 1.5;\n            ctx.strokeStyle = BLACK;\n            ctx.moveTo(this.rays[i][1].x, this.rays[i][1].y);\n            ctx.lineTo(end.x, end.y);\n            ctx.stroke();\n        }\n    }\n}\n","export const lerp = (A, B, t) => {\n    return A + (B - A) * t;\n};\n","export const WHITE = \"white\";\nexport const YELLOW = \"yellow\";\nexport const BLACK = \"#000\";\nexport const RED = \"#FF0000\";\nexport const BLUE = \"#0000ff\";\n","import { lerp } from \"./lerp\";\nexport const getIntersection = (A, B, C, D) => {\n    const tTop = (D.x - C.x) * (A.y - C.y) - (D.y - C.y) * (A.x - C.x);\n    const uTop = (C.y - A.y) * (A.x - B.x) - (C.x - A.x) * (A.y - B.y);\n    const bottom = (D.y - C.y) * (B.x - A.x) - (D.x - C.x) * (B.y - A.y);\n    if (bottom != 0) {\n        const t = tTop / bottom;\n        const u = uTop / bottom;\n        if (t >= 0 && t <= 1 && u >= 0 && u <= 1) {\n            return {\n                x: lerp(A.x, B.x, t),\n                y: lerp(A.y, B.y, t),\n                offset: t,\n            };\n        }\n    }\n    return null;\n};\n","import { getIntersection } from \"../math/intersections\";\nexport const polyInstersect = (poly1, poly2) => {\n    for (let i = 0; i < poly1.length; i++) {\n        for (let j = 0; j < poly2.length; j++) {\n            const touch = getIntersection(poly1[i], poly1[(i + 1) % poly1.length], poly2[j], poly2[(j + 1) % poly2.length]);\n            if (touch)\n                return true;\n        }\n    }\n    return false;\n};\n","import { Level } from \"./level\";\nimport { lerp } from \"../math/lerp\";\nexport class NeuralNetwork {\n    constructor(neuronCounts) {\n        this.levels = [];\n        for (let i = 0; i < neuronCounts.length - 1; i++) {\n            this.levels.push(new Level(neuronCounts[i], neuronCounts[i + 1]));\n        }\n        this.fitness = 0;\n    }\n    static feedForward(givenInputs, network) {\n        let outputs = Level.feedForward(givenInputs, network.levels[0]);\n        for (let i = 1; i < network.levels.length; i++) {\n            outputs = Level.feedForward(outputs, network.levels[i]);\n        }\n        return outputs;\n    }\n    static mutate(network, amount = 1) {\n        network.levels.forEach((level) => {\n            for (let i = 0; i < level.biases.length; i++) {\n                level.biases[i] = lerp(level.biases[i], Math.random() * 2 - 1, amount);\n            }\n            for (let i = 0; i < level.weights.length; i++) {\n                for (let j = 0; j < level.weights[i].length; j++) {\n                    level.weights[i][j] = lerp(level.weights[i][j], Math.random() * 2 - 1, amount);\n                }\n            }\n        });\n    }\n    clone() {\n        const clonedNetwork = new NeuralNetwork([]);\n        clonedNetwork.levels = this.levels.map((level) => level.clone());\n        clonedNetwork.fitness = this.fitness;\n        return clonedNetwork;\n    }\n}\n","export class Level {\n    constructor(inputCount, outputCount) {\n        this.inputs = new Array(inputCount);\n        this.outputs = new Array(outputCount);\n        this.biases = new Array(outputCount);\n        this.weights = [];\n        for (let i = 0; i < inputCount; i++) {\n            this.weights[i] = new Array(outputCount);\n        }\n        Level.randomize(this);\n    }\n    static randomize(level) {\n        for (let i = 0; i < level.inputs.length; i++) {\n            for (let j = 0; j < level.outputs.length; j++) {\n                level.weights[i][j] = Math.random() * 2 - 1;\n            }\n        }\n        for (let i = 0; i < level.biases.length; i++) {\n            level.biases[i] = Math.random() * 2 - 1;\n        }\n    }\n    static feedForward(givenInputs, level) {\n        level.inputs = [...givenInputs];\n        for (let i = 0; i < level.outputs.length; i++) {\n            let sum = 0;\n            for (let j = 0; j < level.inputs.length; j++) {\n                sum += level.inputs[j] * level.weights[j][i];\n            }\n            if (sum > level.biases[i]) {\n                level.outputs[i] = 1;\n            }\n            else {\n                level.outputs[i] = 0;\n            }\n        }\n        return level.outputs;\n    }\n    clone() {\n        return JSON.parse(JSON.stringify(this));\n    }\n}\n","import { HIDDEN } from \"../constants/classNames\";\nimport { Logger } from \"../types/CommonTypes\";\nexport class Common {\n    constructor(...elementId) {\n        if (elementId && elementId[0]) {\n            this.elementId = this.bindElementById(elementId[0]);\n        }\n        else {\n            this.elementId = undefined;\n        }\n    }\n    bindElementById(elementToFindById) {\n        const element = document.getElementById(elementToFindById);\n        if (!element)\n            throw new Error(`Nie znaleziono elementu ${elementToFindById}`);\n        return element;\n    }\n    bindElementByClass(elementToFindByClass) {\n        const element = document.documentElement.querySelector(\".\" + elementToFindByClass);\n        if (!element)\n            throw new Error(`Nie znaleziono elementu ${elementToFindByClass}`);\n        return element;\n    }\n    changeVisbilityOfGivenElement(element, flag) {\n        flag ? element === null || element === void 0 ? void 0 : element.classList.remove(HIDDEN) : element === null || element === void 0 ? void 0 : element.classList.add(HIDDEN);\n    }\n    bindMultipleElements(elementsTobBind) {\n        const elements = document.querySelectorAll(\".\" + elementsTobBind);\n        if (!elements)\n            throw new Error(`Nie znaleziono elementu ${elementsTobBind}`);\n        return elements;\n    }\n    displayMessageAtTheTopOfTheScreen(message, status) {\n        if (status > 2 || status < 0)\n            throw new Error(\"Nieprawidłowy status wiadomości, wprowadź wartości z enuma Errors\");\n        const messageNode = this.bindElementByClass(\"MESSAGE\");\n        this.changeVisbilityOfGivenElement(messageNode, true);\n        switch (status) {\n            case Logger.Error:\n                messageNode.style.color = \"red\";\n                break;\n            case Logger.Message:\n                messageNode.style.color = \"green\";\n                break;\n            case Logger.Warn:\n                messageNode.style.color = \"orange\";\n                break;\n        }\n        this.changeVisbilityOfGivenElement(messageNode, true);\n        setTimeout(() => {\n            this.changeVisbilityOfGivenElement(messageNode, false);\n        }, 1500);\n        messageNode.textContent = message;\n    }\n}\n","export const HIDDEN = \"hidden\";\nexport const CAR_CANVAS_ID = \"carCanvas\";\nexport const NEURAL_NETWORK_CANVAS_ID = \"neuralNetworkCanvas\";\nexport const BEST_CAR_LOCAL = \"bestCarBrain\";\n","export var Logger;\n(function (Logger) {\n    Logger[Logger[\"Message\"] = 0] = \"Message\";\n    Logger[Logger[\"Warn\"] = 1] = \"Warn\";\n    Logger[Logger[\"Error\"] = 2] = \"Error\";\n})(Logger || (Logger = {}));\n","import { DEFAULT_LANE_COUNT, infinity, } from \"../../constants/DefaultValues/EntitiesDimmensions\";\nimport { WHITE } from \"../../constants/DefaultValues/colors\";\nimport { lerp } from \"../../math/lerp\";\nimport { DEFAULT_LINE_WIDTH } from \"../../constants/DefaultValues/EntitiesDimmensions\";\nexport class Road {\n    constructor(x, width, laneCount = DEFAULT_LANE_COUNT) {\n        this.left = x - width / 2;\n        this.right = x + width / 2;\n        this.x = x;\n        this.width = width;\n        this.laneCount = laneCount;\n        this.top = -infinity;\n        this.bottom = infinity;\n        const topLeft = { x: this.left, y: this.top };\n        const topRight = { x: this.right, y: this.top };\n        const bottomLeft = { x: this.left, y: this.bottom };\n        const bottomRight = { x: this.right, y: this.bottom };\n        this.borders = [\n            [topLeft, bottomLeft],\n            [topRight, bottomRight],\n        ];\n    }\n    drawLine(x, dashed = false, ctx) {\n        ctx.setLineDash(dashed ? [20, 20] : []);\n        ctx.beginPath();\n        ctx.moveTo(x, this.top);\n        ctx.lineTo(x, this.bottom);\n        ctx.stroke();\n    }\n    getLaneCenter(laneIndex) {\n        const laneWidth = this.width / this.laneCount;\n        return (this.left +\n            laneWidth / 2 +\n            Math.min(laneIndex, this.laneCount - 1) * laneWidth);\n    }\n    draw(ctx) {\n        if (!ctx)\n            return;\n        ctx.lineWidth = DEFAULT_LINE_WIDTH;\n        ctx.strokeStyle = WHITE;\n        for (let i = 1; i <= this.laneCount - 1; i++) {\n            const x = lerp(this.left, this.right, i / this.laneCount);\n            this.drawLine(x, true, ctx);\n        }\n        ctx.setLineDash([]);\n        this.borders.forEach((border) => {\n            ctx.beginPath();\n            ctx.moveTo(border[0].x, border[0].y);\n            ctx.lineTo(border[1].x, border[1].y);\n            ctx.stroke();\n        });\n    }\n}\n","export const getRandomValueBetweenNums = (num1, num2) => {\n    return Math.floor(Math.random() * (num2 - num1)) + num1;\n};\n","import { NeuralNetwork } from \"./index\";\nimport { DEFAULT_MUTATION_AMOUNT } from \"../constants/DefaultValues/neuralNetworkConsts\";\nfunction getMutationAmount(currentGeneration, initialMutationAmount, decayRate, bestFitness) {\n    const mutationAmount = initialMutationAmount /\n        (1 + decayRate * currentGeneration) /\n        (1 + bestFitness);\n    const minMutationAmount = 0.01;\n    return Math.max(mutationAmount, minMutationAmount);\n}\nexport class GeneticAlgorithm {\n    static trainNeuralNetworks(cars, population, traffic) {\n        for (let i = 0; i < cars.length; i++) {\n            const fitness = cars[i].calculateFitness(traffic);\n            cars[i].brain.fitness = fitness || 0;\n            population[i] = cars[i].brain;\n        }\n    }\n    static evolvePopulation(population, rayCount, generation, bestFit) {\n        const newGeneration = [];\n        const selectedNets = GeneticAlgorithm.selection(population);\n        while (newGeneration.length < population.length) {\n            const parent1 = GeneticAlgorithm.getRandomElement(selectedNets);\n            const parent2 = GeneticAlgorithm.getRandomElement(selectedNets);\n            const offspring = GeneticAlgorithm.crossover(parent1, parent2, rayCount);\n            newGeneration.push(offspring);\n        }\n        const mutation_amount = getMutationAmount(generation, DEFAULT_MUTATION_AMOUNT, 0.016, bestFit);\n        console.log(\"MUTATION AMOUNT:\", mutation_amount);\n        GeneticAlgorithm.mutate(newGeneration, mutation_amount);\n        return newGeneration;\n    }\n    static selection(population) {\n        const sortedPopulation = population.sort((a, b) => b.fitness - a.fitness);\n        // Choose the top 10% neural networks as selectedNets\n        const selectedNets = sortedPopulation.slice(0, Math.ceil(sortedPopulation.length / 10));\n        console.log(selectedNets);\n        return selectedNets;\n    }\n    static crossover(parent1, parent2, raycount) {\n        // Perform single-point crossover\n        const child = new NeuralNetwork([raycount, 7, 4]);\n        const crossoverPoint = Math.floor(Math.random() * parent1.levels.length);\n        for (let i = 0; i < parent1.levels.length; i++) {\n            if (i < crossoverPoint) {\n                child.levels[i] = JSON.parse(JSON.stringify(parent1.levels[i]));\n                child.fitness = parent1.fitness;\n            }\n            else {\n                child.levels[i] = JSON.parse(JSON.stringify(parent2.levels[i]));\n                child.fitness = parent2.fitness;\n            }\n        }\n        return child;\n    }\n    static mutate(population, mutation) {\n        for (const neuralNetwork of population) {\n            NeuralNetwork.mutate(neuralNetwork, mutation);\n        }\n    }\n    static getRandomElement(arr) {\n        const randomIndex = Math.floor(Math.random() * arr.length);\n        return arr[randomIndex];\n    }\n}\n","export const DEFAULT_MUTATION_AMOUNT = 0.4;\nexport const RANDOM_MUTATION = (Math.random() * 2 - 1) / 2;\n","export const TRAFFIC_MOCK_DATA = (road) => [\n    {\n        x: road.getLaneCenter(0),\n        y: -300,\n    },\n    {\n        x: road.getLaneCenter(2),\n        y: -480,\n    },\n    {\n        x: road.getLaneCenter(1),\n        y: -660,\n    },\n    {\n        x: road.getLaneCenter(2),\n        y: -840,\n    },\n    {\n        x: road.getLaneCenter(1),\n        y: -1020,\n    },\n    {\n        x: road.getLaneCenter(2),\n        y: -1200,\n    },\n    {\n        x: road.getLaneCenter(0),\n        y: -1380,\n    },\n    {\n        x: road.getLaneCenter(2),\n        y: -1560,\n    },\n    {\n        x: road.getLaneCenter(1),\n        y: -1740,\n    },\n    {\n        x: road.getLaneCenter(0),\n        y: -1920,\n    },\n    {\n        x: road.getLaneCenter(1),\n        y: -2100,\n    },\n    {\n        x: road.getLaneCenter(2),\n        y: -2280,\n    },\n    {\n        x: road.getLaneCenter(0),\n        y: -2460,\n    },\n    {\n        x: road.getLaneCenter(1),\n        y: -2640,\n    },\n    {\n        x: road.getLaneCenter(2),\n        y: -2820,\n    },\n    {\n        x: road.getLaneCenter(1),\n        y: -3000,\n    },\n    {\n        x: road.getLaneCenter(0),\n        y: -3180,\n    },\n    {\n        x: road.getLaneCenter(1),\n        y: -3360,\n    },\n    {\n        x: road.getLaneCenter(2),\n        y: -3540,\n    },\n    {\n        x: road.getLaneCenter(0),\n        y: -3720,\n    },\n    {\n        x: road.getLaneCenter(2),\n        y: -3900,\n    },\n    {\n        x: road.getLaneCenter(1),\n        y: -4080,\n    },\n    {\n        x: road.getLaneCenter(0),\n        y: -4260,\n    },\n    {\n        x: road.getLaneCenter(1),\n        y: -4440,\n    },\n    {\n        x: road.getLaneCenter(2),\n        y: -4620,\n    },\n    {\n        x: road.getLaneCenter(1),\n        y: -4800,\n    },\n    {\n        x: road.getLaneCenter(0),\n        y: -4980,\n    },\n    {\n        x: road.getLaneCenter(2),\n        y: -5160,\n    },\n    {\n        x: road.getLaneCenter(1),\n        y: -5340,\n    },\n    {\n        x: road.getLaneCenter(0),\n        y: -5520,\n    },\n    {\n        x: road.getLaneCenter(2),\n        y: -5700,\n    },\n    {\n        x: road.getLaneCenter(1),\n        y: -5880,\n    },\n    {\n        x: road.getLaneCenter(0),\n        y: -6060,\n    },\n    {\n        x: road.getLaneCenter(1),\n        y: -6240,\n    },\n    {\n        x: road.getLaneCenter(2),\n        y: -6420,\n    },\n    {\n        x: road.getLaneCenter(0),\n        y: -6600,\n    },\n    {\n        x: road.getLaneCenter(2),\n        y: -6780,\n    },\n    {\n        x: road.getLaneCenter(1),\n        y: -6960,\n    },\n    {\n        x: road.getLaneCenter(0),\n        y: -7140,\n    },\n    {\n        x: road.getLaneCenter(1),\n        y: -7320,\n    },\n    {\n        x: road.getLaneCenter(2),\n        y: -7500,\n    },\n    {\n        x: road.getLaneCenter(0),\n        y: -7680,\n    },\n    {\n        x: road.getLaneCenter(1),\n        y: -7860,\n    },\n    {\n        x: road.getLaneCenter(2),\n        y: -8040,\n    },\n    {\n        x: road.getLaneCenter(1),\n        y: -8220,\n    },\n    {\n        x: road.getLaneCenter(0),\n        y: -8400,\n    },\n    {\n        x: road.getLaneCenter(2),\n        y: -8580,\n    },\n    {\n        x: road.getLaneCenter(1),\n        y: -8760,\n    },\n    {\n        x: road.getLaneCenter(0),\n        y: -8940,\n    },\n    {\n        x: road.getLaneCenter(1),\n        y: -9120,\n    },\n];\n"],"names":[],"version":3,"file":"index.1f978438.js.map","sourceRoot":"/__parcel_source_root/"}